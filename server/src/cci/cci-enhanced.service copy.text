// src/cci/cci-enhanced.service.ts

import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { MongoClient } from 'mongodb';
import { OpenAIService } from '../openai.service';
import {
  CciEnhancedCatalogItem,
  QualifierDto,
  AttributeDto,
} from './cci-enhanced-catalog-item.dto';
import { CciEnhancedResponseDto } from './cci-enhanced-response.dto';

@Injectable()
export class CciEnhancedService implements OnModuleInit {
  private readonly logger = new Logger(CciEnhancedService.name);

  private readonly dbName = 'SchoolSystem';
  private readonly catalogColl = 'cci_catalog';
  private readonly defsColl = 'attributes';

  private attributeDefs: Record<string, { code: string; description: string }[]> = {};

  constructor(
    private readonly mongo: MongoClient,
    private readonly openaiService: OpenAIService,
  ) {}

  async onModuleInit(): Promise<void> {
    const db = this.mongo.db(this.dbName);
    const defsDoc = await db.collection(this.defsColl).findOne({});
    if (!defsDoc) throw new Error(`Missing attribute defs in ${this.defsColl}`);
    this.attributeDefs = Object.fromEntries(
      Object.entries(defsDoc).map(([domain, arr]) => {
        if (!Array.isArray(arr)) return [domain, []];
        return [
          domain,
          (arr as any[]).map(i => ({
            code: i.code,
            description: i.desc ?? i.description,
          })),
        ];
      }),
    );
    this.logger.log(
      `Loaded attribute definitions for: ${Object.keys(this.attributeDefs).join(', ')}`,
    );
  }

  async search(term: string): Promise<CciEnhancedResponseDto> {
    const start = Date.now();
    const vec = await this.openaiService.embedText(term);

    const db = this.mongo.db(this.dbName);
    const coll = db.collection<any>(this.catalogColl);

    const [vectorHits, textHits] = await Promise.all([
      coll
        .aggregate([
          {
            $vectorSearch: {
              index: 'cci_search',
              path: 'embedding',
              queryVector: vec,
              numCandidates: 500,
              limit: 50,
            },
          },
          {
            $project: {
              _id: 0,
              code: 1,
              description: 1,
              includes: 1,
              excludes: 1,
              code_also: 1,
              note: 1,
              qualifiers: 1,
              attributes: 1,
              score: { $meta: 'vectorSearchScore' },
            },
          },
        ])
        .toArray(),

      coll
        .aggregate([
          {
            $search: {
              index: 'cci_text',
              text: {
                query: term,
                path: ['description', 'includes', 'qualifiers.description'],
              },
            },
          },
          { $limit: 50 },
          {
            $project: {
              _id: 0,
              code: 1,
              description: 1,
              includes: 1,
              excludes: 1,
              code_also: 1,
              note: 1,
              qualifiers: 1,
              attributes: 1,
            },
          },
        ])
        .toArray(),
    ]);

    const byCode = new Map<string, any>();
    for (const hit of [...vectorHits, ...textHits]) {
      if (!byCode.has(hit.code)) byCode.set(hit.code, hit);
    }
    const raw = Array.from(byCode.values());

    if (raw.length === 0) {
      return { status: 'not_found', searchTimeMs: Date.now() - start, items: [] };
    }

    const reranked = raw.length > 10 ? await this.rerankWithLLM(term, raw) : raw;

    const items: CciEnhancedCatalogItem[] = await Promise.all(
      reranked.map(async r => {
        const appliedQ = await this.pickQualifiersWithLLM(r.qualifiers, term);
        return {
          code: r.code,
          description: r.description,
          includes: r.includes || [],
          excludes: r.excludes || [],
          codeAlso: r.code_also || [],
          note: r.note || [],
          appliedQualifiers: appliedQ,
          otherQualifiers: (r.qualifiers || []).filter(
            (q: QualifierDto) => !appliedQ.some(a => a.code === q.code),
          ),
          allAttributes: this.lookupAttributeDefs(r.attributes),
          appliedAttributes: this.pickAttributes(r.attributes),
          similarityScore: r.score ?? null,
        };
      }),
    );

    return {
      status: items.length ? 'matched' : 'not_found',
      searchTimeMs: Date.now() - start,
      items,
    };
  }

  private async rerankWithLLM(term: string, raw: any[]): Promise<any[]> {
    const lines = raw.map((r, i) => `${i + 1}. ${r.code}: ${r.description}`).join('\n');
    const system = 'You are a medical‐coding assistant. Rank the candidates by relevance.';
    const user = `
User query: "${term}"

Candidates:
${lines}

Return a JSON array of 1-based indices in your preferred order, e.g. [3,1,2,...].
    `.trim();

    const res = await this.openaiService.chat.completions.create({
      model: 'gpt-4o',
      temperature: 0.2,
      max_tokens: 2048,
      messages: [
        { role: 'system', content: system },
        { role: 'user', content: user },
      ],
    });

    try {
      const idxs = (JSON.parse(res.choices[0].message?.content ?? '') as number[])
        .map(n => n - 1)
        .filter(i => i >= 0 && i < raw.length);
      if (idxs.length) return idxs.map(i => raw[i]);
    } catch {
      // fall back
    }
    return raw;
  }

  private async pickQualifiersWithLLM(
    qualifiers: QualifierDto[] = [],
    term: string,
  ): Promise<QualifierDto[]> {
    if (!qualifiers.length) return [];

    const list = qualifiers
      .map(q => `{"code":"${q.code}","desc":"${q.description}","approach":"${q.approach}"}`)
      .join(',');

    const system = 'You are an expert at selecting medical qualifiers.';
    const user = `
Query: "${term}"

Possible qualifiers:
[${list}]

Return a JSON array of the qualifier.code values that apply, e.g. ["1.AA.35.HA-C1","1.AA.35.HH-1C"]
    `.trim();

    const res = await this.openaiService.chat.completions.create({
      model: 'gpt-3.5-turbo',
      temperature: 0.0,
      max_tokens: 50,
      messages: [
        { role: 'system', content: system },
        { role: 'user', content: user },
      ],
    });

    try {
      const picks = JSON.parse(res.choices[0].message?.content ?? '') as string[];
      const matched = qualifiers.filter(q => picks.includes(q.code));
      if (matched.length) return matched;
    } catch {
      // fallback by simple keyword
      const low = term.toLowerCase();
      return qualifiers.filter(q => low.includes(q.description.toLowerCase()));
    }
    return [];
  }

  private lookupAttributeDefs(
    attrs: Record<string, { type: string; codes: string[] }>,
  ): AttributeDto[] {
    return Object.entries(attrs).flatMap(([domain, { type, codes }]) => {
      const defs = this.attributeDefs[domain] || [];
      if (type === 'N/A' || !defs.length) {
        return [{ name: domain, code: '/', description: 'N/A' }];
      }
      return defs.map(d => ({ name: domain, code: d.code, description: d.description }));
    });
  }

  private pickAttributes(
    attrs: Record<string, { type: string; codes: string[] }>,
  ): AttributeDto[] {
    return Object.entries(attrs).flatMap(([domain, { type, codes }]) => {
      const defs = this.attributeDefs[domain] || [];
      if (type === 'N/A' || !codes.length) {
        return [{ name: domain, code: '/', description: 'N/A' }];
      }
      return defs
        .filter(d => codes.includes(d.code))
        .map(d => ({ name: domain, code: d.code, description: d.description }));
    });
  }
}
