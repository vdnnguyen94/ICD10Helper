// src/cci/cci-enhanced.service.ts

import { Injectable, Logger } from '@nestjs/common';
import { Collection, MongoClient } from 'mongodb';
import { OpenAIService } from '../openai.service';
import {
  CciEnhancedCatalogItem,
  QualifierDto,
  AttributeDto,
} from './cci-enhanced-catalog-item.dto';
import { CciEnhancedResponseDto } from './cci-enhanced-response.dto';

@Injectable()
export class CciEnhancedService {
  private readonly logger = new Logger(CciEnhancedService.name);
  private readonly dbName = 'SchoolSystem';
  private readonly catalogColl = 'cci_catalog';
  // Add the name of your Atlas Vector Search index
  private readonly vectorIndexName = 'cci_search'; // <-- IMPORTANT: Change this to your actual index name

  constructor(
    private readonly mongo: MongoClient,
    private readonly openaiService: OpenAIService,
  ) {}

  /**
   * Main search function called by the resolver.
   * It orchestrates the vector search and any subsequent processing.
   */
  async search(term: string): Promise<CciEnhancedResponseDto> {
    const start = Date.now();
    if (!term || term.trim() === '') {
      return { items: [], status: 'not_found' };
    }

    try {
      const db = this.mongo.db(this.dbName);
      const coll = db.collection<any>(this.catalogColl);

      // Step 1: Generate an embedding for the user's search term.
      const queryVector = await this.openaiService.createEmbedding(term);

      // Step 2: Build and execute the vector search aggregation pipeline.
      const pipeline = this.buildVectorSearchPipeline(queryVector);
      const items = await coll.aggregate<CciEnhancedCatalogItem>(pipeline).toArray();

      const searchTimeMs = Date.now() - start;

      if (items.length === 0) {
        return { items: [], status: 'not_found', searchTimeMs };
      }
      
      // Step 3 (Optional but recommended): Further refine results if needed.
      // For example, you could iterate through the top results and use another
      // AI call to pick the most relevant qualifiers, as your original code suggested.
      // For now, we return the direct vector search results.

      return {
        items,
        status: items.length > 0 ? 'matched' : 'not_found',
        searchTimeMs,
      };
    } catch (error) {
      this.logger.error('Error during CCI enhanced search:', error);
      throw new Error('Failed to perform the search.');
    }
  }

  /**
   * Constructs the MongoDB Aggregation Pipeline for vector search.
   * @param queryVector The vector representation of the search term.
   * @returns The MongoDB aggregation pipeline array.
   */
  private buildVectorSearchPipeline(queryVector: number[]): any[] {
    return [
      {
        $vectorSearch: {
          index: this.vectorIndexName,
          path: 'embedding', // The field in your documents that contains the vectors.
          queryVector: queryVector,
          numCandidates: 200, // Number of candidates to consider. Should be > limit.
          limit: 50, // Return the top 50 results as requested.
        },
      },
      {
        $project: {
          _id: 0, // Exclude the default _id field.
          code: 1,
          description: 1,
          note: 1,
          includes: 1,
          excludes: 1,
          codeAlso: '$code_also',
          // The vector search returns the full document, so qualifiers are included.
          // We can rename it to match the DTO.
          otherQualifiers: '$qualifiers',
          // The DTO fields appliedQualifiers, allAttributes, and appliedAttributes
          // would be populated by subsequent logic if needed. For now, they will be empty.
          attributes: 1,    
          appliedQualifiers: [],
          allAttributes: [],
          appliedAttributes: [],
          // Include the similarity score in the results.
          similarityScore: {
            $meta: 'vectorSearchScore',
          },
        },
      },
    ];
  }
  
}